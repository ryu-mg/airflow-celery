version: '3'

# 공통 관리
x-airflow-common: &airflow-common
  build: .
  volumes: &airflow-common-volumes
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./config:/opt/airflow/config
  environment: &airflow-common-env
    AIRFLOW_HOME: /opt/airflow
    AIRFLOW_CONFIG: /opt/airflow/config/airflow.cfg
    AIRFLOW__WEBSERVER__CONFIG_FILE: /opt/airflow/config/webserver_config.py
  env_file: &airflow-common-env-file
    - config/.env
  


services:
  # PostgreSQL 데이터베이스 - Airflow 메타데이터 저장 용도
  postgres:
    image: postgres:17.4-alpine
    ports:
      - "5432:5432"
    volumes:
      - .pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    environment:
      <<: *airflow-common-env
    env_file: *airflow-common-env-file


  # RabbitMQ - Celery 메시지 브로커로 사용
  rabbitmq:
    image: rabbitmq:3.13.7-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 10s
      retries: 5
    restart: always
    environment:
      <<: *airflow-common-env
    env_file: *airflow-common-env-file


  # Airflow scheduler
  scheduler:
    <<: *airflow-common
    command: airflow scheduler
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  
  # Airflow webserver
  webserver:
    <<: *airflow-common
    command: airflow webserver
    # healthcheck:
    #   test: ["CMD", "curl", "--fail", "http://127.0.0.1:8080/health"]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 5
    depends_on:
      scheduler:
        condition: service_healthy
    ports:
      - "8080:8080"


  # Airflow 워커
  worker:
    <<: *airflow-common
    command: airflow celery worker
    depends_on:
     -  webserver


  # Flower - Celery 모니터링 도구
  flower:
    build: .
    command: airflow celery flower
    depends_on:
      - worker
    ports:
      - "5555:5555"
    environment:
      <<: *airflow-common-env
    env_file: *airflow-common-env-file


  init:
    <<: *airflow-common
    command: bash -c "airflow db init && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - init
